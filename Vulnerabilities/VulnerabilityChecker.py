from Vulnerabilities.WeakPassword import *
from Vulnerabilities.PortScanner import *
from TypeGetter import *
from Vulnerabilities.SMTPUserEnumeration import *
from Vulnerabilities.PANConflict import *
from Vulnerabilities.OpenKeyTransfer import *
from Vulnerabilities.NoPass import *
from Vulnerabilities.MQTTPubSub import *
from Vulnerabilities.LinkKey import *
from killerbee import KBInterfaceError
from killerbee import KillerBee

class VulnerabilityChecker:

    def __init__(self):
        """
        Инициализация объекта.
        """
        self.name = ''
        self.desc = ''
        self.threats = ''
        self.methods = ''

    def merge_vulnerability_reports(self, *reports: Dict[str, List[VulnerabilityType]]) -> Dict[str, List[VulnerabilityType]]:
        merged_result = {}

        for report in reports:
            for mac, vulnerabilities in report.items():
                if mac not in merged_result:
                    merged_result[mac] = []

                # Добавляем только уникальные уязвимости
                for vuln in vulnerabilities:
                    if vuln not in merged_result[mac]:
                        merged_result[mac].append(vuln)

        return merged_result
    def check(self, devices):
        for i in devices:
            i['type'] = next((k for k, v in device_str_name.items() if v == i['тип']), None)
        port_checker = PortScanner()
        res = port_checker.check(devices)
        print(res)
        open_key_devices=[]
        checker_weak_password = WeakPassword()
        print('weak password check')
        weak_password_devices = checker_weak_password.check(devices)
        res = self.merge_vulnerability_reports(res, weak_password_devices)
        print('weak', weak_password_devices)
        pan_devices=[]
        smtp_enum = SMTPUserEnumeration()
        linkey_devices=[]
        smtp_devices = smtp_enum.check(devices)
        res = self.merge_vulnerability_reports(res, smtp_devices)
        print('smtp', smtp_devices)
        try:
            kb = KillerBee()
            kb.start_sniffing()
            time.sleep(5)  # Слушаем 5 секунд для захвата пакетов
            packets = kb.get_packets()
            pan_conf_checker = PANConflict()
            pan_devices = pan_conf_checker.check(devices, packets)
            res = self.merge_vulnerability_reports(res, pan_devices)
            open_key = OpenKeyTransfer()
            open_key_devices = open_key.check(devices, packets)
            res = self.merge_vulnerability_reports(res, open_key_devices)
            linkey = LinkKey()
            linkey_devices = linkey.check(devices, packets)
            res = self.merge_vulnerability_reports(res, linkey_devices)
        except KBInterfaceError:
            self.kb = None
        print('pan', pan_devices)
        print('open key', open_key_devices)
        print('linkey', linkey_devices)
        nopass = NoPass()
        no_pass_devices = nopass.check(devices)
        res = self.merge_vulnerability_reports(res, no_pass_devices)
        print('no pass', no_pass_devices)
        mqtt_pub_sub = MQTTPubSub()
        mqtt_devices = mqtt_pub_sub.check(devices)
        res = self.merge_vulnerability_reports(res, mqtt_devices)
        print('mqtt_pub_sub', mqtt_devices)
        return res
