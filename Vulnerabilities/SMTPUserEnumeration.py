import socket

from Vulnerabilities.Vulnerability import Vulnerability, VulnerabilityType
from vendor_type import DeviceType


class SMTPUserEnumeration(Vulnerability):
    COMMON_SMTP_PORTS = [25, 465, 587]  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã SMTP
    COMMON_USERS = ['root', 'admin', 'user', 'support']  # –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def __init__(self, timeout: float = 5.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞.
        """
        super().__init__()  # –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.ip = ''
        self.type = ''
        self.vulns = {}
        self.name = "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º"
        self.desc = ("–ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ SMTP-—Å–µ—Ä–≤–µ—Ä–µ "
                     "(—Å–µ—Ä–≤–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞).")
        self.threats = ("–ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π, "
                        "—á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É –∫ —É—á–µ—Ç–Ω—ã–º –∑–∞–ø–∏—Å—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                        "–ü–æ–ª—É—á–∏–≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–µ–ª–µ–≤—ã–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–µ –ø–∏—Å—å–º–∞, —á—Ç–æ–±—ã —É–∫—Ä–∞—Å—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
                        "–ó–Ω–∞—è –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –ª–µ–≥—á–µ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –∂–µ—Ä—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é.")
        self.methods = '''1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

    –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å:
        –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, Outlook, Thunderbird).
        –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é "–§–∞–π–ª" –∏–ª–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏").
        –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ö–æ–¥—è—â–µ–π –ø–æ—á—Ç—ã (SMTP).
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (SSL/TLS). –û–±—ã—á–Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ—Ä—Ç–∞. –î–ª—è SMTP –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç 465 (SSL) –∏–ª–∏ 587 (TLS).

2. –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å:
        –ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º.
        –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP –∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã VRFY –∏ EXPN. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Postfix, Exim).

3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏

    –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å:
        –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—É–∫–≤ (–≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞), —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: P@ssw0rd!2023.
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–∞—Ö.

4. –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA)

    –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å:
        –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        –ù–∞–π–¥–∏—Ç–µ –æ–ø—Ü–∏—é "–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è" –∏–ª–∏ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –¥–≤–∞ —à–∞–≥–∞".
        –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –û–±—ã—á–Ω–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Authenticator).

5. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏

    –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å:
        –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø–æ—á—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ" –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º.
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤—Ö–æ–¥–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç (–µ—Å–ª–∏ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π.

'''
        self.timeout = timeout

    def check_for_device(self, ip: str, mac: str = None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ SMTP
        :param ip: IP –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        :param mac: MAC –∞–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
        """
        results = {
            'smtp_detected': False,
            'vrfy_vulnerable': False,
            'expn_vulnerable': False,
            'rcpt_vulnerable': False
        }

        print(f"\n[üîç] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SMTP –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {ip} ({mac or '–±–µ–∑ MAC'})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ SMTP –ø–æ—Ä—Ç—ã
        for port in self.COMMON_SMTP_PORTS:
            if self._check_smtp_service(ip, port):
                results['smtp_detected'] = True
                print(f"[‚ÑπÔ∏è] –û–±–Ω–∞—Ä—É–∂–µ–Ω SMTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ {ip}:{port}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                results['vrfy_vulnerable'] = self._test_vrfy(ip, port)
                results['expn_vulnerable'] = self._test_expn(ip, port)
                results['rcpt_vulnerable'] = self._test_rcpt(ip, port)
                break

        return results['vrfy_vulnerable'] or results['expn_vulnerable'] or results['rcpt_vulnerable']

    def _check_smtp_service(self, ip: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ SMTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
        try:
            with socket.create_connection((ip, port), timeout=self.timeout) as sock:
                response = sock.recv(1024).decode().strip()
                return response.startswith("220")
        except (socket.timeout, ConnectionRefusedError, OSError):
            return False

    def _test_vrfy(self, ip: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å VRFY"""
        for user in self.COMMON_USERS:
            try:
                with socket.create_connection((ip, port), timeout=self.timeout) as sock:
                    sock.recv(1024)  # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sock.send(f"VRFY {user}\r\n".encode())
                    response = sock.recv(1024).decode().strip()

                    if response.startswith("250") or "User unknown" not in response:
                        print(f"[‚ö†Ô∏è] –£—è–∑–≤–∏–º–æ—Å—Ç—å VRFY –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
                        return True
            except Exception:
                continue
        return False

    def _test_expn(self, ip: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å EXPN"""
        try:
            with socket.create_connection((ip, port), timeout=self.timeout) as sock:
                sock.recv(1024)
                sock.send(b"EXPN test\r\n")
                response = sock.recv(1024).decode().strip()

                if response.startswith("250"):
                    print(f"[‚ö†Ô∏è] –£—è–∑–≤–∏–º–æ—Å—Ç—å EXPN –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
                    return True
        except Exception:
            pass
        return False

    def _test_rcpt(self, ip: str, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å RCPT TO"""
        for user in self.COMMON_USERS:
            try:
                with socket.create_connection((ip, port), timeout=self.timeout) as sock:
                    sock.recv(1024)
                    sock.send(b"MAIL FROM: <test@example.com>\r\n")
                    sock.recv(1024)
                    sock.send(f"RCPT TO: <{user}>\r\n".encode())
                    response = sock.recv(1024).decode().strip()

                    if response.startswith("250"):
                        print(f"[‚ö†Ô∏è] –£—è–∑–≤–∏–º–æ—Å—Ç—å RCPT TO –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}! –û—Ç–≤–µ—Ç: {response}")
                        return True
            except Exception:
                continue
        return False

    def append(self, device):
        if device['mac'] in self.vulns:
            self.vulns[device['mac']].append(SMTPUserEnumeration())
        else:
            self.vulns[device['mac']] = [SMTPUserEnumeration()]
        print(self.vulns)
        self.vulns[device['mac']][-1].ip = device['ip']
        self.vulns[device['mac']][-1].type = device['—Ç–∏–ø']

    def check(self, devices):
        vulnerable_devices = {}
        print(devices)
        for i in devices:
            if i['type'] in [DeviceType.Camera, DeviceType.Printer]:
                print('device', i['ip'], i['type'])
                cur = self.check_for_device(i['ip'], i['mac'])
                if cur:
                    self.append(i)
        return self.vulns