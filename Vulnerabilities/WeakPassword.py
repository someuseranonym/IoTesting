import asyncio
import ftplib
import socket
import telnetlib
import time


import requests
from requests.auth import HTTPBasicAuth
import socket
import ssl
import requests
from requests.auth import HTTPBasicAuth
import subprocess
import warnings
from urllib3.exceptions import InsecureRequestWarning
import requests
from pysnmp.entity.engine import SnmpEngine
from pysnmp.hlapi.v3arch import ContextData, UdpTransportTarget, CommunityData
from pysnmp.smi.rfc1902 import ObjectType, ObjectIdentity
from requests.auth import HTTPBasicAuth

from Vulnerabilities.Vulnerability import *
from TypeGetter import *
import paramiko
import argparse
import paho.mqtt.client as mqtt
from socket import socket, SOCK_DGRAM, AF_INET, timeout
from random import randint
from time import sleep
import optparse, sys, os
from subprocess import Popen, PIPE
import threading
import signal
from scapy.all import *
from pysnmp.hlapi import *
import sys
import argparse
from tqdm import tqdm
from functools import partial
import tqdm.notebook as tq

import socket

from pysnmp.hlapi.v3arch.asyncio import get_cmd


def check_port(ip_address, port):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º IP-–∞–¥—Ä–µ—Å–µ.
    """
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        sock.connect((ip_address, port))

        sock.close()
        return True  # –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
    except (socket.timeout, socket.error):
        return False  # –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è


def brute_force_ssh(device, usernames, passwords):
    result = check_port(device['ip'], 22)
    if not result:
        print('port 22 closed')
        return False
    print('bruteforce ssh')
    for username in usernames:
        for password in passwords:
            try:
                time.sleep(0.2)
                ssh_client = paramiko.SSHClient()
                ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh_client.connect(device['ip'], port=22, username=username, password=password, timeout=5)

                print(f"[+] –£—Å–ø–µ—Ö! Username: {username}, –ü–∞—Ä–æ–ª—å: {password}")
                ssh_client.close()
                return True
            except paramiko.AuthenticationException:
                # print(f"[-] –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: Username: {username}, –ü–∞—Ä–æ–ª—å: {password}")
                pass
            except Exception as e:
                continue
    return False


    print("[-] –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö.")

def check_ssl(target_ip, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        try:
            with socket.create_connection((target_ip, port), timeout=3) as sock:
                with context.wrap_socket(sock, server_hostname=target_ip) as ssock:
                    cert = ssock.getpeercert()
                    print(f"\nüîê SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}:")
                    print(f" - –°—É–±—ä–µ–∫—Ç: {dict(x[0] for x in cert['subject'])}")
                    print(f" - –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {cert['notAfter']}")
                    print(f" - –ò–∑–¥–∞—Ç–µ–ª—å: {dict(x[0] for x in cert['issuer'])}")
                    return True
        except Exception as e:
            return False
        return False
def check_https_vulnerabilities(target_ip, username, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π HTTPS"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –Ω–∞ {target_ip}...")
        SSL_PORTS = [443, 8443, 9443]
        for port in SSL_PORTS:
            try:
                url = f"https://{target_ip}:{port}"
                print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ {url}...")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                response = requests.get(url,
                                        auth=HTTPBasicAuth(username, password),
                                        verify=False,
                                        timeout=3)

                if response.status_code == 200:
                    print(f"‚ö† HTTPS-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                    return check_ssl(target_ip, port)

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    tests = [
                        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "/system-config.ini"),
                        ("–°—Ç–∞—Ç—É—Å", "/cgi-bin/status"),
                        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "/firmware-upgrade")
                    ]

                    for test_name, path in tests:
                        try:
                            test_url = f"{url}{path}"
                            resp = requests.get(test_url, verify=False, timeout=2)
                            if resp.status_code == 200:
                                print(f"   ‚ÄºÔ∏è –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {path}")
                        except:
                            continue
            except Exception as e:
                print(f"   {str(e)}")
                continue
        return False
def check_default_credentials(ip, username, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    #print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π...")
    urls_to_check = [
        f"http://{ip}/",
        f"http://{ip}/cgi-bin/userConfig.cgi",
        f"http://{ip}/config.html"
    ]

    for url in urls_to_check:
        try:
            response = requests.get(url, auth=HTTPBasicAuth(username, password), timeout=3)
            print(response.text)
            if response.status_code == 200:
                print(f" –£—è–∑–≤–∏–º–æ—Å—Ç—å: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {url}")
                check_https_vulnerabilities(ip, username, password)

                return True
        except:
            continue
    return False

def brute_force_http(device, usernames, passwords):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å HTTP-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–µ—Ä–µ–±–∏—Ä–∞—è –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä–æ–ª–∏.
    """
    print('http bruteforce')
    i = 1

    for username in usernames:
        for password in passwords:
            res = check_default_credentials(device['ip'], username, password)
            if res:
                print('weak password', username, password, device['ip'])
                return True
    return False


def brute_force_snmp(wordlist, snmp_version, ip, port, timeout=1.0):
    v_arg = 1 if snmp_version == '2c' else 0  # 1 for SNMPv2c, 0 for v1
    print(f'Starting SNMPv{snmp_version} bruteforce on {ip}:{port}')

    with open(wordlist, 'r') as in_file:
        communities = [line.strip() for line in in_file if line.strip()]

    for com in tqdm(communities, desc="Testing communities"):
        time.sleep(0.2)  # Rate limiting

        try:
            errorIndication, errorStatus, errorIndex, varBinds = next(
                getCmd(
                    SnmpEngine(),
                    CommunityData(com, mpModel=v_arg),
                    UdpTransportTarget(
                        transportAddr=(ip, port),
                        timeout=timeout,
                        retries=1
                    ),
                    ContextData(),
                    ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0'))
                ))

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if errorIndication:
                tqdm.write(f"'{com}': Error - {errorIndication}")
                continue
            elif errorStatus:
                tqdm.write(f"'{com}': Auth failed - {errorStatus.prettyPrint()}")
                continue

            # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            tqdm.write(f"\n[+] Found community: '{com}'")
            for varBind in varBinds:
                tqdm.write(f"Response: {' = '.join([x.prettyPrint() for x in varBind])}")
            return True
        except Exception as e:
            continue

        print("\n[!] No valid communities found")
    return False


def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))


def on_message(client, userdata, msg):
    print(msg.topic + " " + str(msg.payload))


def brute_force_mqtt(device, port, usernames, passwords):
    try:
        client = mqtt.Client()
        client.on_connect = on_connect
        client.on_message = on_message
        client.connect(device['ip'], port)
        client.connect(device['ip'], port)
        print('mqtt bruteforce')
        for username in usernames:
            for password in passwords:
                time.sleep(0.2)
                password = password.strip()
                rc = client.username_pw_set(username, password)
                if rc == mqtt.MQTT_ERR_SUCCESS:
                    print("Login succeeded with username, password: ", username, password)
                    return True
        print('no passwords')
    except Exception as e:
        pass
    return False


def tcp_syn_scan(ip, port, timeout=5):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç —Å –ø–æ–º–æ—â—å—é TCP SYN."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((ip, port))
        sock.close()
        return result == 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
    except socket.gaierror:
        print(f"Hostname resolution failed for {ip}")
        return False
    except Exception as e:
        # print(f"TCP SYN Scan Error for {ip}:{port} - {e}") #Suppress noise
        return False
    return False


def check_telnet_credentials(ip, port, usernames, passwords, timeout=5):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Telnet-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –ø–µ—Ä–µ–¥–∞—á—É –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
    default_logins - —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (username, password) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    print('telnet testing ')
    if not tcp_syn_scan(ip, port, timeout):
        print('telnet port is closed')
        return False

    try:
        tn = telnetlib.Telnet(ip, port, timeout=timeout)

        # Try login, then read the prompt
        try:
            tn.read_until(b"ogin:", timeout=timeout)  # Check login prompt
            # Test default credentials
            i = 0
            for username in usernames:
                for password in passwords:
                    tn.write((username + "\n").encode())
                    time.sleep(0.2)
                    tn.read_until(b"assword:", timeout=timeout)
                    tn.write((password + "\n").encode())

                    # Check for success
                    time.sleep(0.2)  # Give it some time to respond
                    response = tn.read_all().decode(errors='ignore')
                    if i < 6:
                        print(response)
                    if "Login incorrect" not in response and "Invalid password" not in response and "Incorrect" not in response and "denied" not in response:
                        print(f"  Telnet: Login successful with {username}:{password}")
                        tn.close()
                        return True
                    i+=1
        except Exception as e:
            tn.close()
            return False
        tn.close()  # Clean up the connection
        return False


    except socket.timeout:
        return False
    except ConnectionRefusedError:
        return False
    except Exception as e:
        return False


def check_ftp_credentials(ip, port, usernames, passwords, timeout=5):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç FTP-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –ø–µ—Ä–µ–¥–∞—á—É –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
    default_logins - —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (username, password) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if not tcp_syn_scan(ip, port, timeout):
        return False

    try:
        ftp = ftplib.FTP()
        ftp.connect(ip, port, timeout)  # Connect before login
        print('ftp testing ')
        # Try anonymous login first
        try:
            ftp.login()
            print("  FTP: Anonymous login successful.")
            ftp.quit()
            return True
        except ftplib.error_perm as e:  # Check for non-230 errors (e.g. 530)
            if "530" in str(e):
                print("  FTP: Anonymous login refused")
            else:
                print(f"  FTP: Anonymous login error: {e}")  # Other errors in non-anonymous login

        # Test default credentials
        for username in usernames:
            for password in passwords:
                time.sleep(0.2)
                try:
                    ftp.connect(ip, port, timeout)  # Reconnect each time to restart auth
                    ftp.login(username, password)
                    print(f"  FTP: Login successful with: {username}:{password}")
                    ftp.quit()
                    return True
                except ftplib.error_perm as e:  # Check for non-230 errors (e.g. 530)
                    pass
                except Exception as e:
                    print(f"FTP login error: {e}")

        ftp.quit()  # Clean up
        return False


    except socket.timeout:
        return False
    except ConnectionRefusedError:
        return False
    except ftplib.all_errors as e:  # Catch all ftplib errors for the initial connect
        return False

    except Exception as e:
        return False


def check_default_credentials2(ip, username, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–≤–µ—Ç–∞"""
    print(f"\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {ip}...")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ credentials: {username}:{password}")

    urls_to_check = [
        f"http://{ip}/",
        f"http://{ip}/cgi-bin/userConfig.cgi",
        f"http://{ip}/config.html",
        f"http://{ip}/cgi-bin/param.cgi",
        f"http://{ip}/cgi-bin/viewer/video.jpg",
        f"http://{ip}/video.mjpg",
        f"http://{ip}/snapshot.jpg"
    ]

    success_urls = []

    for url in urls_to_check:
        try:
            print(f"\n–ü—Ä–æ–≤–µ—Ä—è–µ–º URL: {url}")

            # –ù–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            unauth_response = requests.get(url, timeout=5, verify=False)
            print(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {unauth_response.status_code}")
            print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(unauth_response.content)} –±–∞–π—Ç")

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            auth_response = requests.get(url, auth=HTTPBasicAuth(username, password), timeout=5, verify=False)
            print(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {auth_response.status_code}")
            print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(auth_response.content)} –±–∞–π—Ç")

            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
            if auth_response.status_code == 200:
                # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if unauth_response.status_code == 401 and auth_response.status_code == 200:
                    print("‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: 401 -> 200 –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    success_urls.append(url)
                    continue

                # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content = auth_response.text.lower() if auth_response.text else ""
                if ("login" not in content and
                        "password" not in content and
                        "unauthorized" not in content):
                    print("‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ")
                    success_urls.append(url)
                    continue

                # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
                if len(auth_response.content) > len(unauth_response.content) + 500:
                    print("‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                    success_urls.append(url)
                    continue

                # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if 'image' in auth_response.headers.get('Content-Type', ''):
                    print("‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    success_urls.append(url)
                    continue

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")
            continue

    if success_urls:
        print("\n‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç—å: —Å–ª–µ–¥—É—é—â–∏–µ URL –¥–æ—Å—Ç—É–ø–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        for url in success_urls:
            print(f"- {url}")
        return True
    else:
        print("\n‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º URL")
        return False
class WeakPassword(Vulnerability):
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞.
        """
        super().__init__()  # –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.vulns = {}
        self.ip = ''
        self.type = ''
        self.name = "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å"
        self.desc = "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–≥–∫–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å."
        self.threats = ("–ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º. "
                        "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞;"
                        "–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–æ–±–∏—Ä–∞–µ–º–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º. "
                        "–ù–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤;"
                        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û –Ω–∞ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
        self.methods = ('''

    - –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–º–µ—Ä—ã (–æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ IP-–∞–¥—Ä–µ—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ).  
- –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí –ü–∞—Ä–æ–ª—å* (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π).  
- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ *—Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å* (–º–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ/–Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã).  
- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.  
- –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–º–µ—Ä—ã –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª *–°–µ—Ç—å ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Üí HTTPS/SSL*.  
- –í–∫–ª—é—á–∏—Ç–µ *HTTPS* (–µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç).  
- –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∑–∞–≥—Ä—É–∑–∏—Ç–µ *—Å–≤–æ–π SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Let's Encrypt).  
- –ï—Å–ª–∏ HTTPS –Ω–µ—Ç, *–æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
- –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞–π–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é *–ø—Ä–æ—à–∏–≤–∫—É* –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏.  
- –í –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∫–∞–º–µ—Ä—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û*.  
- –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é.  
- *–ó–∞–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞*, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω (—á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä).  
- –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –Ω—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ *VPN* –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–æ–≤.  
- –í–∫–ª—é—á–∏—Ç–µ *–±—Ä–∞–Ω–¥–º–∞—É—ç—Ä* –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤.  
- –û—Ç–∫–ª—é—á–∏—Ç–µ *UPnP* –≤ –∫–∞–º–µ—Ä–µ –∏ —Ä–æ—É—Ç–µ—Ä–µ (—á—Ç–æ–±—ã –ø–æ—Ä—Ç—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).  
- –í–∫–ª—é—á–∏—Ç–µ *–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA)*, –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.  
- –†–µ–≥—É–ª—è—Ä–Ω–æ *–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏* –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.  
- –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ‚Äî *–∑–∞–º–µ–Ω–∏—Ç–µ –µ–µ* –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–æ–¥–µ–ª—å.  ''')

    def append(self, device, text):
        if device['mac'] in self.vulns:
            self.vulns[device['mac']].append(WeakPassword())
        else:
            self.vulns[device['mac']] = [WeakPassword()]
        print(self.vulns)
        self.vulns[device['mac']][-1].name += ' '+text
        self.vulns[device['mac']][-1].ip=device['ip']
        self.vulns[device['mac']][-1].type = device['—Ç–∏–ø']

    def check_for_device(self, device, usernames, passwords):
        print('check', device['mac'], device['type'])
        snmp_path = '/home/mint/PycharmProjects/IoTesting/Vulnerabilities/WordLists/snmp_comms.txt'
        if device['type'] in [DeviceType.light_switch, DeviceType.Lamp, DeviceType.Counter, DeviceType.Socket]:
            #if (brute_force_http(device, usernames, passwords)):
            #   self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É HTTP')
            if(brute_force_mqtt(device, 1883, usernames, passwords)):
                self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É MQTT')
            if(check_ftp_credentials(device['ip'], 21, usernames, passwords)):
                self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É FTP')
            if(check_telnet_credentials(device['ip'], 23, usernames, passwords)):
                self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Telnet')
        match device['type']:
            case DeviceType.Camera:
                if(brute_force_ssh(device, usernames, passwords)):
                    self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É SSH')
                if(check_default_credentials2(device['ip'], 'admin', 'admin')):
                    self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É HTTP')
                if(check_default_credentials2(device['ip'], 'user', '1')):
                    self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É HTTP')
                if(brute_force_snmp(snmp_path, '1', device['ip'], 22, 2)):
                    self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É SNMP')
                if(brute_force_snmp(snmp_path, '2c', device['ip'], 22, 2)):
                    self.append(device, '–ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É SNMP')
            case DeviceType.Printer:
                brute_force_http(device, usernames, passwords)
                brute_force_snmp(snmp_path, '1', device['ip'], 22, 2)
                brute_force_snmp(snmp_path, '2c', device['ip'], 22, 2)
            case DeviceType.Thermostat:
                brute_force_ssh(device, usernames, passwords)
                brute_force_http(device,  usernames, passwords)
                brute_force_mqtt(device, 1883, usernames, passwords)
            case DeviceType.Sensor:
                brute_force_http(device, usernames, passwords)
                brute_force_mqtt(device, 1883, usernames, passwords)
                brute_force_snmp(snmp_path,'1', device['ip'], 22, 2)
                brute_force_snmp(snmp_path,'2c', device['ip'], 22, 2)
            case _:  # Default case (wildcard pattern)
                pass

    def check(self, devices):
        username_file = '/home/mint/PycharmProjects/IoTesting/Vulnerabilities/WordLists/usernames.txt'
        passwords_file ='/home/mint/PycharmProjects/IoTesting/Vulnerabilities/WordLists/rockyou.txt'
        usernames = []
        passwords = []
        try:
            with open(username_file, 'r') as f:
                usernames1 = [line.strip() for line in f]
                for i in usernames1:
                    usernames.append(i)
            with open(passwords_file, 'r', encoding='utf-8', errors='ignore') as f:
                    passwords1 = [line.strip() for line in f]
                    for i in passwords1:
                        passwords.append(i)
        except FileNotFoundError as e:
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return
        vulnerable_devices = {}
        print(devices)
        for i in devices:
            if i['type'] != DeviceType.Skip:
                print('device', i['ip'], i['type'])
                cur = self.check_for_device(i, usernames, passwords)
                if cur:
                    if i['mac'] in vulnerable_devices:
                        vulnerable_devices[i['mac']].append(VulnerabilityType.WeakPassword)
                    else:
                        vulnerable_devices[i['mac']] = VulnerabilityType.WeakPassword
        return self.vulns
